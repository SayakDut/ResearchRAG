from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import tempfile
import os
from pathlib import Path
from typing import Dict

class MarkdownExporter:
    def __init__(self):
        self.export_dir = Path("exports")
        self.export_dir.mkdir(exist_ok=True)
    
    def export(self, paper_data: Dict) -> str:
        """Export paper summary to Markdown format."""
        title = paper_data.get("title", "Untitled Paper")
        summary = paper_data.get("summary", "")
        pros = paper_data.get("pros", [])
        cons = paper_data.get("cons", [])
        future_work = paper_data.get("future_work", [])
        
        # Create markdown content
        markdown_content = f"""# {title}

## Summary

{summary}

## Strengths

"""
        
        for pro in pros:
            markdown_content += f"- {pro}\n"
        
        markdown_content += "\n## Weaknesses\n\n"
        
        for con in cons:
            markdown_content += f"- {con}\n"
        
        markdown_content += "\n## Future Work\n\n"
        
        for work in future_work:
            markdown_content += f"- {work}\n"
        
        markdown_content += f"""

---

*Generated by ResearchRAG*
"""
        
        # Save to file
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        filename = f"{safe_title[:50]}.md"
        file_path = self.export_dir / filename
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        return str(file_path)

class PDFExporter:
    def __init__(self):
        self.export_dir = Path("exports")
        self.export_dir.mkdir(exist_ok=True)
    
    def export(self, paper_data: Dict) -> str:
        """Export paper summary to PDF format."""
        title = paper_data.get("title", "Untitled Paper")
        summary = paper_data.get("summary", "")
        pros = paper_data.get("pros", [])
        cons = paper_data.get("cons", [])
        future_work = paper_data.get("future_work", [])
        
        # Create safe filename
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        filename = f"{safe_title[:50]}.pdf"
        file_path = self.export_dir / filename
        
        # Create PDF
        doc = SimpleDocTemplate(str(file_path), pagesize=letter)
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1  # Center alignment
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            spaceBefore=20
        )
        
        body_style = ParagraphStyle(
            'CustomBody',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=12,
            alignment=0  # Left alignment
        )
        
        bullet_style = ParagraphStyle(
            'CustomBullet',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            leftIndent=20,
            bulletIndent=10
        )
        
        # Build content
        story = []
        
        # Title
        story.append(Paragraph(title, title_style))
        story.append(Spacer(1, 20))
        
        # Summary
        story.append(Paragraph("Summary", heading_style))
        story.append(Paragraph(summary, body_style))
        story.append(Spacer(1, 15))
        
        # Strengths
        story.append(Paragraph("Strengths", heading_style))
        for pro in pros:
            story.append(Paragraph(f"• {pro}", bullet_style))
        story.append(Spacer(1, 15))
        
        # Weaknesses
        story.append(Paragraph("Weaknesses", heading_style))
        for con in cons:
            story.append(Paragraph(f"• {con}", bullet_style))
        story.append(Spacer(1, 15))
        
        # Future Work
        story.append(Paragraph("Future Work", heading_style))
        for work in future_work:
            story.append(Paragraph(f"• {work}", bullet_style))
        story.append(Spacer(1, 30))
        
        # Footer
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=9,
            alignment=1,  # Center alignment
            textColor='gray'
        )
        story.append(Paragraph("Generated by ResearchRAG", footer_style))
        
        # Build PDF
        doc.build(story)
        
        return str(file_path)
